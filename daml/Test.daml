module Test where

import Daml.Script
--import DA.List
import Setup
import IdentityManagement
--import DA.Optional

testSharedGroup = script do
  testParties@TestParties{..} <- setupParties

  let 
    ownerKey = PublicKey with
      publicKey = "OWNER KEY"
      fingerprint = "OWNER FINGERPRINT"

  groupId <- submit owner do
    createCmd IdentityGroup with
      owner
      members = []
      id = "123"

  groupId <- submit owner do
    exerciseCmd @IdentityGroup groupId InviteNewMember with
      invitee = identity1

  groupId <- submit owner do
    exerciseCmd @IdentityGroup groupId InviteNewMember with
      invitee = identity2

  groupId <- submit owner do
    exerciseCmd @IdentityGroup groupId InviteNewMember with
      invitee = identity3

  group456Id <- submit owner do
    createCmd IdentityGroup with
      owner
      members = []
      id = "456"

  group456Id <- submit owner do
    exerciseCmd @IdentityGroup group456Id InviteNewMember with
      invitee = identity4

  let 
    identity1Key = PublicKey with
      publicKey = "IDENTITY1 KEY"
      fingerprint = "IDENTITY1 FINGERPRINT"

  key1Id <- submit identity1 do
    exerciseCmd @IdentityGroup groupId RegisterPublicKey with
      member = identity1
      publicKey = identity1Key

  let 
    identity2Key = PublicKey with
      publicKey = "IDENTITY2 KEY"
      fingerprint = "IDENTITY2 FINGERPRINT"

  key2Id <- submit identity2 do
    exerciseCmd @IdentityGroup groupId RegisterPublicKey with
      member = identity2
      publicKey = identity1Key

  let 
    identity1Key = PublicKey with
      publicKey = "IDENTITY3 KEY"
      fingerprint = "IDENTITY3 FINGERPRINT"

  key3Id <- submit identity3 do
    exerciseCmd @IdentityGroup groupId RegisterPublicKey with
      member = identity3
      publicKey = identity1Key

  -- result <- submit identity1 do
  --   exerciseCmd @IdentityGroup groupId FetchMemberKey with
  --     member = owner
  --     actor = identity1
  -- debug $ result

  return (groupId, testParties)

testEncryption = script do

  (groupId, testParties@TestParties{..}) <- testSharedGroup
  groupId <- submit owner do
    createCmd EncryptionKey with
      owner = owner
      groupId = "123"
      id = "11111"
      wrappedKey = "wrapper DEK"

  let 
    encryption : Encryption = EncAES256 with
        groupId = "123"
        keyId = "11111"
        iv = "long IV"
    dataValue = "encrypted-PII"
    privateData : PrivateData = OnLedger with
      encryption
      dataValue

  groupId <- submit owner do
    createCmd DataSubject with
      id = "812398761983276"
      owner = owner
      publicData1 = "open text 1"
      publicData2 = "open text 2"
      privateData = Some privateData
      subprocessors = [owner]

  return ()


