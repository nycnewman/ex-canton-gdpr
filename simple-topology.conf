canton {
  participants {
    participant1  {
      # have the sequencer clients from all nodes acknowledge more frequently to ensure that the sequencer can prune.
      sequencer-client.acknowledgement-interval = 5m

      # ensure that the participants don't need to keep history for more than 5 minutes for duplicate request detection
      init.ledger-api.max-deduplication-duration = 5m

      #storage.type = memory
      storage {
          type = postgres
          config {
              dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
                  properties = {
                     serverName = ${POSTGRES_HOST}
                     databaseName = participant1
                     portNumber = 5432
                     user = ${PARTICIPANT1_USER}
                     password = ${PARTICIPANT1_PASSWORD}
                  }
                  connectionPool = HikariCP
                  registerMbeans = true
          }
      }
      admin-api.port = 6866
      ledger-api.port = 6865
    }
    participant2 {
      sequencer-client.acknowledgement-interval = 5m

      init.ledger-api.max-deduplication-duration = 5m

      #storage.type = memory
      storage {
          type = postgres
          config {
              dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
                  properties = {
                     serverName = ${POSTGRES_HOST}
                     databaseName = participant2
                     portNumber = 5432
                     user = ${PARTICIPANT2_USER}
                     password = ${PARTICIPANT2_PASSWORD}
                  }
                  connectionPool = HikariCP
                  registerMbeans = true
          }
      }
      admin-api.port = 5022
      ledger-api.port = 5021
    }
  }
  domains {
    mydomain {
      # to be able to prune sequencers, have each sequencer client request a time proof every 5 minutes
      # note that if there is a risk that any of participants does not produce domain traffic within 10 minutes,
      # ensure that they specify time-tracker.min-observation-duration of 5 minutes when connecting to the domain
      # so that participants also request regular time proofs and don't block sequencer pruning.
      time-tracker.min-observation-duration = 5m

      sequencer-client.acknowledgement-interval = 5m

      # cause the database sequencer to perform frequent checkpoints, so that lack of checkpoints doesn't prevent pruning.
      # sequencer.reader.checkpoint-interval = 5m

      # cut off unauthenticated participants after 5 minutes as they only use unauthenticated requests during onboarding;
      # otherwise the sequencer would only cut them off after 24 hours by default which would prevent pruning for the first day.
      sequencer.pruning.unauthenticated-member-retention = 5m

      sequencer = {
          type = database
          writer {
             type = high-throughput
          }
      }

      #storage.type = memory
      storage {
          type = postgres
          config {
              dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
                  properties = {
                     serverName = ${POSTGRES_HOST}
                     databaseName = domain
                     portNumber = 5432
                     user = ${DOMAIN_USER}
                     password = ${DOMAIN_PASSWORD}
                  }
                  connectionPool = HikariCP
                  registerMbeans = true
          }
      }
      public-api.port = 5018
      admin-api.port = 5019
    }
  }
  // enable ledger_api commands for our getting started guide
  features.enable-testing-commands = yes
  features.enable-preview-commands = yes
}

